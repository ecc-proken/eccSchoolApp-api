// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	domain "github.com/yumekiti/eccSchoolApp-api/domain"
)

// CalendarUsecase is an autogenerated mock type for the CalendarUsecase type
type CalendarUsecase struct {
	mock.Mock
}

// Get provides a mock function with given fields: year, month, user
func (_m *CalendarUsecase) Get(year string, month string, user *domain.User) ([]*domain.Calendar, error) {
	ret := _m.Called(year, month, user)

	var r0 []*domain.Calendar
	if rf, ok := ret.Get(0).(func(string, string, *domain.User) []*domain.Calendar); ok {
		r0 = rf(year, month, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Calendar)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *domain.User) error); ok {
		r1 = rf(year, month, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCalendarUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewCalendarUsecase creates a new instance of CalendarUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCalendarUsecase(t mockConstructorTestingTNewCalendarUsecase) *CalendarUsecase {
	mock := &CalendarUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
